char nl;	/* new line */

/*****************************************
**
**	Basic If, IfElse && While
**
*****************************************/

void test_basic_if() {
	/* True */
	@"Ok Pre-If\n";
	if (1) {
		@"Ok Inside-If\n";
	}
	@"Ok After-If\n";

	/* False */
	@"Ok Pre-If\n";
	if (0) {
		@"Error False-If";
	}
	@"Ok After-If\n";
}

void test_basic_ifelse() {
	/* True */
	@"Ok Pre-IfElse\n";
	if (1) {
		@"Ok Inside-IfElse\n";
	} else {
		@"Error True-Inside-IfElse\n";
	}
	@"Ok After-IfElse\n";

	/* False */
	@"Ok Pre-IfElse\n";
	if (0) {
		@"Error False-Inside-IfElse\n";
	} else {
		@"Ok Inside-IfElse\n";
	}
	@"Ok After-IfElse\n";
}

void test_basic_while() {
	int i;
	i = 10;
	while (i < 10) {
		i = i + 1;
	}

	if (i == 10) {
		@"Ok While\n";
	} else {
		@"Error While\n";
	}

	while (0) {
		@"Error While";
	}
}

/*****************************************
**
**	Basic conditions
**
*****************************************/

int true_func() {
	return 1;
}

int false_func() {
	return 0;
}

void test_basic_conds() {
	char true_char, false_char;
	int true_int, false_int;
	true_char = 1;
	false_char = 0;
	true_int = true_char;
	false_int = false_char;

	/* KInt */
	if (1) { @"Ok KInt\n"; }
	if (0) { @"Error KInt\n"; }
	/* VarChar */
	if (true_char) { @"Ok VarChar\n"; }
	if (false_char) { @"Error VarChar\n"; }
	/* VarInt */
	if (true_int) { @"Ok VarInt\n"; }
	if (false_int) { @"Error VarInt\n"; }
	/* Call */
	if (true_func()) { @"Ok Call\n"; }
	if (false_func()) { @"Error Call\n"; }
	/* Minus */
	if (-true_int) { @"Ok Minus\n"; }
	if (-false_int) { @"Error Minus\n"; }
	/* Not */
	if (!true_int) { @"Error Not\n"; }
	if (!false_int) { @"Ok Not\n"; }
	/* Equal */
	if (0 == 0) { @"Ok Equal\n"; }
	if (0 == 1) { @"Error Equal\n"; }
	/* And */
	if (0 && 0) { @"Error And\n"; }
	if (0 && 1) { @"Error And\n"; }
	if (1 && 0) { @"Error And\n"; }
	if (1 && 1) { @"Ok And\n"; }
	/* Or */
	if (0 || 0) { @"Error Or\n"; }
	if (0 || 1) { @"Ok Or\n"; }
	if (1 || 0) { @"Ok Or\n"; }
	if (1 || 1) { @"Ok Or\n"; }
	/* Add */
	if (1 + -1) { @"Error Add\n"; }
	if (1 + 1) { @"Ok Add\n"; }
	/* Sub */
	if (1 - 1) { @"Error Sub\n"; }
	if (1 - 2) { @"Ok Sub\n"; }
	/* Mul */
	if (1 * 0) { @"Error Mul\n"; }
	if (1 * 1) { @"Ok Mul\n"; }
	/* Div */
	if (1 / 1) { @"Ok Div\n"; }
	/* GreaterThan */
	if (0 > 0) { @"Error GreaterThan\n"; }
	if (0 > 1) { @"Error GreaterThan\n"; }
	if (1 > 0) { @"Ok GreaterThan\n"; }
	/* LessThan */
	if (0 < 0) { @"Error LessThan\n"; }
	if (1 < 0) { @"Error LessThan\n"; }
	if (0 < 1) { @"Ok LessThan\n"; }
	/* GreaterEqual */
	if (0 >= 1) { @"Error GreaterEqual\n"; }
	if (0 >= 0) { @"Ok GreaterEqual\n"; }
	if (1 >= 0) { @"Ok GreaterEqual\n"; }
	/* LessEqual */
	if (1 <= 0) { @"Error LessEqual\n"; }
	if (0 <= 0) { @"Ok LessEqual\n"; }
	if (0 <= 1) { @"Ok LessEqual\n"; }
}

/*****************************************
**
**	Condition types
**
*****************************************/

void test_cond_types() {
	@"Condition types\n";

	{
		int i;
		i = 10;
		if (i) { @i; }
		@nl;
	}

	{
		char c;
		c = 65;
		if (c) { @c; }
		@nl;
	}

	{
		float f;
		f = 0.1;
		if (f) { @f; }
		@nl;
	}
}

/*****************************************
**
**	Short-circuit evaluation
**
*****************************************/

int short_circuit_var;

int increment_and_return_true() {
	short_circuit_var = short_circuit_var + 3;
	return 1;
}

int increment_and_return_false() {
	short_circuit_var = short_circuit_var - 5;
	return 0;
}
	
void test_short_circuit() {
	/* And */
	short_circuit_var = 0; /* F X F */
	if (increment_and_return_false() && increment_and_return_false()) {
		@"Error";
	} else {
		@"Ok";
	}
	if (short_circuit_var == -5) {
		@" And F X F short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error And short-circuit\n";
	}

	short_circuit_var = 0; /* T X T */
	if (increment_and_return_true() && increment_and_return_true()) {
		@"Ok";
	} else {
		@"Error";
	}
	if (short_circuit_var == 6) {
		@" And T X T short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error And short-circuit\n";
	}

	short_circuit_var = 0; /* T X F */
	if (increment_and_return_true() && increment_and_return_false()) {
		@"Error";
	} else {
		@"Ok";
	}
	if (short_circuit_var == -2) {
		@" And T X F short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error And short-circuit\n";
	}

	short_circuit_var = 0;  /* F X T */
	if (increment_and_return_false() && increment_and_return_true()) {
		@"Error";
	} else {
		@"Ok";
	}
	if (short_circuit_var == -5) {
		@" And F X T short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error And short-circuit\n";
	}

	/* Or */
	short_circuit_var = 0; /* T X T */
	if (increment_and_return_true() || increment_and_return_true()) {
		@"Ok";
	} else {
		@"Error";
	}
	if (short_circuit_var == 3) {
		@" Or T X T short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error Or short-circuit\n";
	}

	short_circuit_var = 0; /* F X F */
	if (increment_and_return_false() || increment_and_return_false()) {
		@"Error";
	} else {
		@"Ok";
	}
	if (short_circuit_var == -10) {
		@" Or F X F short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error Or short-circuit\n";
	}

	short_circuit_var = 0; /* T X F */
	if (increment_and_return_true() || increment_and_return_false()) {
		@"Ok";
	} else {
		@"Error";
	}
	if (short_circuit_var == 3) {
		@" Or T X F short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error Or short-circuit\n";
	}

	short_circuit_var = 0; /* F X T */
	if (increment_and_return_false() || increment_and_return_true()) {
		@"Ok";
	} else {
		@"Error";
	}
	if (short_circuit_var == -2) {
		@" Or F X T short-circuit\n";
	} else {
		@short_circuit_var;
		@" - Error Or short-circuit\n";
	}
}

/*****************************************
**
**	Wild
**
*****************************************/

int factorial(int n) {
	if (n == 0) {
		return 1;
	}
	return n * factorial(n - 1);
}

int[][] new_matrix(int size) {
	int i, j;
	int[][] m;
	
	m = new int[][size];
	i = 0;

	while (i < size) {
		j = 0;
		m[i] = new int[size];
		while (j < size) {
			m[i][j] = i >= j;
			j = j + 1;
		}
		i = i + 1;
	}

	return m;

}

void print_matrix(int[][] m, int size) {
	int i, j;
	i = 0;

	while (i < size) {
		j = 0;
		while (j < size) {
			@"[";
			@m[i][j];
			@"] ";
			j = j + 1;
		}
		@nl;
		i = i + 1;
	}
}

void test_nested_conditions() {
	char c;
	float a;
	int[] array;

	@"Nested conditions\n";

	a = 5;
	a = !((a > 4.9) && (3 == a));
	@a;
	@nl;

	a = -0.0001;
	a = (a <= 0) || (!a);
	@a;
	@nl;

	c = 0;
	a = 18.5;
	a = (((19.5 - a) / 2) > 0 && !c) * 0.125;
	@a;
	@nl;
}

/*****************************************
**
**	Runs all tests
**
*****************************************/

int main() {
	nl = 10; /* \n */
	
	test_basic_if();
	@nl;
	test_basic_ifelse();
	@nl;
	test_basic_while();
	@nl;
	test_basic_conds();
	@nl;
	test_cond_types();
	@nl;
	test_short_circuit();
	@nl;
	test_nested_conditions();
	@nl;

	/* Wild */
	{
		@"Factorial\n";
		@factorial(10);
		@nl; @nl;
	}

	{
		int size;
		size = 5;
		@"Print matrix a(ij) = (i >= j) \n";
		print_matrix(new_matrix(size), size);
	}

	return 0;
}
