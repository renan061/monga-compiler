int intvalue;
float floatvalue;
char charvalue;
void x() {
}
void y(int a) {
}
void z(int a, float b, char c) {
}
void foo(char a, int b, float c) {
}
void bar(int intvalue1, int intvalue2) {
    int i;
    float f;
    char c;
    int[] x;
    int[][] y;
    int[][][] z;
    int a;
    int b;
    float a;
    float b;
    float c;
    char a;
    char b;
    char c;
    char d;
    char e;
}
void baz(int intvalue1) {
    a = (1);
    b = (2);
    c = (3);
}
void main(char[] a, int[][] b, float[][][] c) {
    int a;
    float b;
    char c;
    (if(((1)||(2))) {
        a = (3);
    })
    (if(((1)||(2))) {
        a = (3);
    } else {
        a = (4);
    })
    (while(((1)||(2))) {
    })
    (while(((1)||(2))) {
        a = (1);
        b = (2);
        c = (3);
    })
    (a)[(1)] = ((2)||(3));
    return ;
    return ((1)||(2));
    foo();
    foo((1));
    foo((1), (2), (3));
    (if((1)) {
      (if((2)) {
        a = (3);
      } else {
        a = (4);
      })
    } else {
      (if((5)) {
        (if((6)) {
          a = (7);
        } else {
          (while((8)) {
            (if((9)) {
              a = (10);
            } else {
              (if((11)) {
                a = (12);
              } else {
                a = (13);
              })
            })
          })
        })
      })
    })
    a = (b);
    a = ((b)[(1)]);
    a = ((((b)[(1)])[(2)])[(3)]);
    a = ((((b)[((0)>=(5))])[(foo((1), (bar(((0)&&(1))))))])[((1)+((a)[(3)]))]);
    a = (1);
    a = (1.100000);
    a = ("111");
    a = (b);
    a = (foo());
    a = (foo((1)));
    a = (foo((1), (2)));
    a = (foo((1), (2), (3)));
    a = (new int[(2)]);
    a = (-(1));
    a = (!(1));
    a = ((1)*(2));
    a = ((1)/(2));
    a = ((1)+(2));
    a = ((1)-(2));
    a = ((1)==(2));
    a = ((1)<=(2));
    a = ((1)>=(2));
    a = ((1)<(2));
    a = ((1)>(2));
    a = ((1)&&(2));
    a = ((1)||(2));
    a = ((-(1))||(((2)*(3))>=((4)+((5)/(6)))));
    a = ((((0)&&(1))+(((foo((2), (bar(((1)+((3)/(7)))))))/(a))*(3)))+(new int[(7.500000)]));
}
