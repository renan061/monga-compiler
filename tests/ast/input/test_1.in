/* AST */

/* Global DefVar */
int intvalue;
float floatvalue;
char charvalue;

/* DefFunc */
int func0() {
	return 1;
}
int func1(int a) {
	return 1;
}
int func2(int a, int b) {
	return 1;
}
int func3(int a, float b, char c) {
	return 1;
}

void foo(char a, int b, float c) {
/* CmdBlock without vars and cmds */
}
int fooreturn(char a, int b, float c) {
	return 1;
}

void bar(int intvalue1, int intvalue2) {
/* CmdBlock with vars and without cmds */
	/* TypeNode */
	int i;
	float f;
	char c;
	int[] x;
	int[][] y;
	int[][][] z;
	/* Var definition with list of names */
	int a1, b1;
	float a2, b2, c2;
	char a3, b3, c3, d3, e3;
}

void baz(int intvalue1) {
/* CmdBlock without vars and with cmds */
	intvalue1 = 1;
	intvalue1 = 2;
	intvalue1 = 3;
	/* CmdReturn */
	return;
}

int main(char[] x, int[][] y, float[][][] z) {
/* CmdBlock with vars and cmds */
	int[] indexed1;
	int[][][] indexed3;
	int a;
	float b;
	char c;

	/* Cmds */
		/* CmdIf */
		if (1 || 2) {
			a = 3;
		}
		/* CmdIfElse */
		if (1 || 2) {
			a = 3;
		} else {
			a = 4;
		}
		/* CmdWhile */
			while(1 || 2) {}
			while(1 || 2) {
				a = 1;
				b = 2;
				c = 3;
			}
		/* CmdAsg */
			indexed1[1] = 2 || 3;
		/* CmdReturn */
			return 1 || 2;
		/* CmdCall */
			func0();
			func1(1);
			func3(1, 2, 3);
		/* Crazy cmds */
		if (1)
			if (2)
				a = 3;
			else
				a = 4;
		else if (5)
			if (6)
				a = 7;
			else
				while(8)
					if (9)
						a = 10;
					else if (11)
						a = 12;
					else 
						a = 13;

	/* Vars */
		/* VarId */
		a = b;
		/* VarIndexed */
		a = indexed1[1];
		a = indexed3[1][2][3];
		a = indexed3[0 >= 5][fooreturn(1, func1(0 && 1), 3.0)][1 + indexed1[3]];

	/* Exps */
		/* ExpKInt */
		a = 1;
		/* ExpKFloat */
		a = 1.1;
		/* ExpKStr */
		a = "111";
		/* ExpVar */
		a = b;
		/* ExpCall */
		a = func0();
		a = func1(1);
		a = func2(1, 2);
		a = func3(1, 2, 3);
		/* ExpNew */
		indexed1 = new int[2];
		/* ExpUnary */
		a = -1;
		a = !1;
		/* ExpMul */
		a = 1 * 2;
		a = 1 / 2;
		/* ExpAdd */
		a = 1 + 2;
		a = 1 - 2;
		/* ExpComp */
		a = 1 == 2;
		a = 1 <= 2;
		a = 1 >= 2;
		a = 1 < 2;
		a = 1 > 2;
		/* ExpAnd */
		a = 1 && 2;
		/* ExpOr */
		a = 1 || 2;
		/* Crazy Exps */
		a = -1 || 2 * 3 >= 4 + 5 / 6;
		a = (0 && 1) + fooreturn(2, func1(1 + 3 / 7), 3) / a * 3 + (new int[7]);
}