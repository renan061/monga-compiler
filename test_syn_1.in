/* OK test */

/* definition_var */

	/* list_names */
	int var;
	int var, var, var, var;

	/* type */
	int var;
	float var;
	char var;
	int[] var;
	float[][] var;
	char[][][][][] var;

/* definition_func */

	/* func_param_list */
	void foo() {}
	int foo(int a) {}
	int[] foo(int a) {}

	/* param_list */
	float foo(float a, int b) {}
	char foo(char a, float b, int c) {}

/* block */

	/* block_definition_var_list */
	void bar() {}
	void bar() { int var; }
	void bar() { char var; float var; int var; }

	/* block_command_list */
	void bar() { int var; }
	void bar() { char var; float var; int var; }

/* command */

	/* if / if else / if else if / if else if else */
	void foo() { if (1) {} }
	void foo() { if (1) {} else {} }
	void foo() { if (1) {} else if (1) {} }
	void foo() { if (1) {} else if (1) {} else {} }

	/* if else while ambiguities */
	void foo() {
		if (1)
			while (1)
				if (1)
					while (1)
						if (1)
							var = 1;
						else
							var = 1;
				else if (1)
					while (1)
						var = 1;

		else if (1)
			var = 1;
		else
			var = 1;
	}

	/* while */
	void foo() { while (1) {} }

	/* var = exp */
	void foo() { var = 1; }

	/* return */
	void foo() { return ; }
	void foo() { return 1; }

	/* func_call */
	void foo() { bar(); }
	void foo() { bar(1); }
	void foo() { bar(1, 2, 3); }

/* exp */

	/* TODO */

